// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: competition.proto

package competition

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompetitionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID             int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`                        // User ID of user.
	Title              string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                           // Title of competition.
	Description        string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`               // Description of competition.
	DatasetTitle       string `protobuf:"bytes,4,opt,name=datasetTitle,proto3" json:"datasetTitle,omitempty"`             // Title of dataset.
	DatasetDescription string `protobuf:"bytes,5,opt,name=datasetDescription,proto3" json:"datasetDescription,omitempty"` // Description of dataset.
}

func (x *CompetitionCreateRequest) Reset() {
	*x = CompetitionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionCreateRequest) ProtoMessage() {}

func (x *CompetitionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionCreateRequest.ProtoReflect.Descriptor instead.
func (*CompetitionCreateRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{0}
}

func (x *CompetitionCreateRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CompetitionCreateRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CompetitionCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CompetitionCreateRequest) GetDatasetTitle() string {
	if x != nil {
		return x.DatasetTitle
	}
	return ""
}

func (x *CompetitionCreateRequest) GetDatasetDescription() string {
	if x != nil {
		return x.DatasetDescription
	}
	return ""
}

type CompetitionCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionID int64 `protobuf:"varint,1,opt,name=competitionID,proto3" json:"competitionID,omitempty"` // Competition ID of competition.
}

func (x *CompetitionCreateResponse) Reset() {
	*x = CompetitionCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionCreateResponse) ProtoMessage() {}

func (x *CompetitionCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionCreateResponse.ProtoReflect.Descriptor instead.
func (*CompetitionCreateResponse) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{1}
}

func (x *CompetitionCreateResponse) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

type CompetitionEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID             int64   `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`                              // User ID of user.
	CompetitionID      int64   `protobuf:"varint,2,opt,name=competitionID,proto3" json:"competitionID,omitempty"`                // Competition ID of competition.
	Title              *string `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`                           // Title of competition.
	Description        *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`               // Description of competition.
	DatasetTitle       *string `protobuf:"bytes,5,opt,name=datasetTitle,proto3,oneof" json:"datasetTitle,omitempty"`             // Title of dataset.
	DatasetDescription *string `protobuf:"bytes,6,opt,name=datasetDescription,proto3,oneof" json:"datasetDescription,omitempty"` // Description of dataset.
}

func (x *CompetitionEditRequest) Reset() {
	*x = CompetitionEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionEditRequest) ProtoMessage() {}

func (x *CompetitionEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionEditRequest.ProtoReflect.Descriptor instead.
func (*CompetitionEditRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{2}
}

func (x *CompetitionEditRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CompetitionEditRequest) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

func (x *CompetitionEditRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CompetitionEditRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CompetitionEditRequest) GetDatasetTitle() string {
	if x != nil && x.DatasetTitle != nil {
		return *x.DatasetTitle
	}
	return ""
}

func (x *CompetitionEditRequest) GetDatasetDescription() string {
	if x != nil && x.DatasetDescription != nil {
		return *x.DatasetDescription
	}
	return ""
}

// TODO: стоит добавить limit offset
type CompetitionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // User ID of user.
}

func (x *CompetitionListRequest) Reset() {
	*x = CompetitionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionListRequest) ProtoMessage() {}

func (x *CompetitionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionListRequest.ProtoReflect.Descriptor instead.
func (*CompetitionListRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{3}
}

func (x *CompetitionListRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CompetitionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionList []*CompetitionInfo `protobuf:"bytes,1,rep,name=competitionList,proto3" json:"competitionList,omitempty"` // Array of competition.
}

func (x *CompetitionListResponse) Reset() {
	*x = CompetitionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionListResponse) ProtoMessage() {}

func (x *CompetitionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionListResponse.ProtoReflect.Descriptor instead.
func (*CompetitionListResponse) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{4}
}

func (x *CompetitionListResponse) GetCompetitionList() []*CompetitionInfo {
	if x != nil {
		return x.CompetitionList
	}
	return nil
}

type CompetitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionID int64  `protobuf:"varint,1,opt,name=competitionID,proto3" json:"competitionID,omitempty"` // Competition ID of competition.
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                  // Title of competition.
	DatasetTitle  string `protobuf:"bytes,3,opt,name=datasetTitle,proto3" json:"datasetTitle,omitempty"`    // Title of dataset.
}

func (x *CompetitionInfo) Reset() {
	*x = CompetitionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionInfo) ProtoMessage() {}

func (x *CompetitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionInfo.ProtoReflect.Descriptor instead.
func (*CompetitionInfo) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{5}
}

func (x *CompetitionInfo) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

func (x *CompetitionInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CompetitionInfo) GetDatasetTitle() string {
	if x != nil {
		return x.DatasetTitle
	}
	return ""
}

type CompetitionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`               // User ID of user.
	CompetitionID int64 `protobuf:"varint,2,opt,name=competitionID,proto3" json:"competitionID,omitempty"` // Competition ID of competition.
}

func (x *CompetitionInfoRequest) Reset() {
	*x = CompetitionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionInfoRequest) ProtoMessage() {}

func (x *CompetitionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionInfoRequest.ProtoReflect.Descriptor instead.
func (*CompetitionInfoRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{6}
}

func (x *CompetitionInfoRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CompetitionInfoRequest) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

type CompetitionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionID      int64   `protobuf:"varint,1,opt,name=competitionID,proto3" json:"competitionID,omitempty"`          // Competition ID of competition.
	Title              string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                           // Title of competition.
	DatasetTitle       string  `protobuf:"bytes,4,opt,name=datasetTitle,proto3" json:"datasetTitle,omitempty"`             // Title of dataset.
	Description        string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`               // Description of competition.
	DatasetDescription string  `protobuf:"bytes,5,opt,name=datasetDescription,proto3" json:"datasetDescription,omitempty"` // Description of dataset.
	AmountUsers        int64   `protobuf:"varint,6,opt,name=amountUsers,proto3" json:"amountUsers,omitempty"`              // Amount of users in current competition.
	MaximumScore       float32 `protobuf:"fixed32,7,opt,name=maximumScore,proto3" json:"maximumScore,omitempty"`           // Maximum value of user score
}

func (x *CompetitionInfoResponse) Reset() {
	*x = CompetitionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionInfoResponse) ProtoMessage() {}

func (x *CompetitionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionInfoResponse.ProtoReflect.Descriptor instead.
func (*CompetitionInfoResponse) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{7}
}

func (x *CompetitionInfoResponse) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

func (x *CompetitionInfoResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CompetitionInfoResponse) GetDatasetTitle() string {
	if x != nil {
		return x.DatasetTitle
	}
	return ""
}

func (x *CompetitionInfoResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CompetitionInfoResponse) GetDatasetDescription() string {
	if x != nil {
		return x.DatasetDescription
	}
	return ""
}

func (x *CompetitionInfoResponse) GetAmountUsers() int64 {
	if x != nil {
		return x.AmountUsers
	}
	return 0
}

func (x *CompetitionInfoResponse) GetMaximumScore() float32 {
	if x != nil {
		return x.MaximumScore
	}
	return 0
}

// TODO: стоит добавить limit offset
type LeaderBoardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionID int64 `protobuf:"varint,1,opt,name=competitionID,proto3" json:"competitionID,omitempty"` // Competition ID of competition.
}

func (x *LeaderBoardRequest) Reset() {
	*x = LeaderBoardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderBoardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderBoardRequest) ProtoMessage() {}

func (x *LeaderBoardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderBoardRequest.ProtoReflect.Descriptor instead.
func (*LeaderBoardRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{8}
}

func (x *LeaderBoardRequest) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

type LeaderBoardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeaderBoardList []*LeaderBoard `protobuf:"bytes,1,rep,name=leaderBoardList,proto3" json:"leaderBoardList,omitempty"` // Array of leaderBoard.
	CompetitionID   int64          `protobuf:"varint,2,opt,name=competitionID,proto3" json:"competitionID,omitempty"`    // Competition ID of competition.
}

func (x *LeaderBoardResponse) Reset() {
	*x = LeaderBoardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderBoardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderBoardResponse) ProtoMessage() {}

func (x *LeaderBoardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderBoardResponse.ProtoReflect.Descriptor instead.
func (*LeaderBoardResponse) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{9}
}

func (x *LeaderBoardResponse) GetLeaderBoardList() []*LeaderBoard {
	if x != nil {
		return x.LeaderBoardList
	}
	return nil
}

func (x *LeaderBoardResponse) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

type LeaderBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64   `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`  // User ID of user.
	Score   float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`   // Score of solution.
	AddedAt string  `protobuf:"bytes,3,opt,name=addedAt,proto3" json:"addedAt,omitempty"` // Datetime of added solution.
}

func (x *LeaderBoard) Reset() {
	*x = LeaderBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderBoard) ProtoMessage() {}

func (x *LeaderBoard) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderBoard.ProtoReflect.Descriptor instead.
func (*LeaderBoard) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{10}
}

func (x *LeaderBoard) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *LeaderBoard) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *LeaderBoard) GetAddedAt() string {
	if x != nil {
		return x.AddedAt
	}
	return ""
}

type UserActivityTotalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // User ID of user.
}

func (x *UserActivityTotalRequest) Reset() {
	*x = UserActivityTotalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActivityTotalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityTotalRequest) ProtoMessage() {}

func (x *UserActivityTotalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityTotalRequest.ProtoReflect.Descriptor instead.
func (*UserActivityTotalRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{11}
}

func (x *UserActivityTotalRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UserActivityTotalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTime              string `protobuf:"bytes,1,opt,name=totalTime,proto3" json:"totalTime,omitempty"`
	TotalAttempts          int64  `protobuf:"varint,2,opt,name=totalAttempts,proto3" json:"totalAttempts,omitempty"`
	TotalCompetitions      int64  `protobuf:"varint,3,opt,name=totalCompetitions,proto3" json:"totalCompetitions,omitempty"`
	TotalOwnerCompetitions int64  `protobuf:"varint,4,opt,name=totalOwnerCompetitions,proto3" json:"totalOwnerCompetitions,omitempty"`
}

func (x *UserActivityTotalResponse) Reset() {
	*x = UserActivityTotalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActivityTotalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityTotalResponse) ProtoMessage() {}

func (x *UserActivityTotalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityTotalResponse.ProtoReflect.Descriptor instead.
func (*UserActivityTotalResponse) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{12}
}

func (x *UserActivityTotalResponse) GetTotalTime() string {
	if x != nil {
		return x.TotalTime
	}
	return ""
}

func (x *UserActivityTotalResponse) GetTotalAttempts() int64 {
	if x != nil {
		return x.TotalAttempts
	}
	return 0
}

func (x *UserActivityTotalResponse) GetTotalCompetitions() int64 {
	if x != nil {
		return x.TotalCompetitions
	}
	return 0
}

func (x *UserActivityTotalResponse) GetTotalOwnerCompetitions() int64 {
	if x != nil {
		return x.TotalOwnerCompetitions
	}
	return 0
}

type UserActivityFullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // User ID of user.
}

func (x *UserActivityFullRequest) Reset() {
	*x = UserActivityFullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActivityFullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityFullRequest) ProtoMessage() {}

func (x *UserActivityFullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityFullRequest.ProtoReflect.Descriptor instead.
func (*UserActivityFullRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{13}
}

func (x *UserActivityFullRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type UserActivityFullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner  []*CompetitionInfoFullOwner `protobuf:"bytes,1,rep,name=owner,proto3" json:"owner,omitempty"`
	Member []*CompetitionInfoFull      `protobuf:"bytes,2,rep,name=member,proto3" json:"member,omitempty"`
}

func (x *UserActivityFullResponse) Reset() {
	*x = UserActivityFullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserActivityFullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityFullResponse) ProtoMessage() {}

func (x *UserActivityFullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityFullResponse.ProtoReflect.Descriptor instead.
func (*UserActivityFullResponse) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{14}
}

func (x *UserActivityFullResponse) GetOwner() []*CompetitionInfoFullOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *UserActivityFullResponse) GetMember() []*CompetitionInfoFull {
	if x != nil {
		return x.Member
	}
	return nil
}

type CompetitionInfoFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionID int64   `protobuf:"varint,1,opt,name=competitionID,proto3" json:"competitionID,omitempty"` // Competition ID of competition.
	Title         string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                  // Title of competition.
	DatasetTitle  string  `protobuf:"bytes,3,opt,name=datasetTitle,proto3" json:"datasetTitle,omitempty"`    // Title of dataset.
	Score         float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`                // Score of solution.
	AddedAt       string  `protobuf:"bytes,5,opt,name=addedAt,proto3" json:"addedAt,omitempty"`              // Datetime of added solution.
}

func (x *CompetitionInfoFull) Reset() {
	*x = CompetitionInfoFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionInfoFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionInfoFull) ProtoMessage() {}

func (x *CompetitionInfoFull) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionInfoFull.ProtoReflect.Descriptor instead.
func (*CompetitionInfoFull) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{15}
}

func (x *CompetitionInfoFull) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

func (x *CompetitionInfoFull) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CompetitionInfoFull) GetDatasetTitle() string {
	if x != nil {
		return x.DatasetTitle
	}
	return ""
}

func (x *CompetitionInfoFull) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CompetitionInfoFull) GetAddedAt() string {
	if x != nil {
		return x.AddedAt
	}
	return ""
}

type CompetitionInfoFullOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompetitionID int64  `protobuf:"varint,1,opt,name=competitionID,proto3" json:"competitionID,omitempty"` // Competition ID of competition.
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                  // Title of competition.
	DatasetTitle  string `protobuf:"bytes,3,opt,name=datasetTitle,proto3" json:"datasetTitle,omitempty"`    // Title of dataset.
	AmountUsers   int64  `protobuf:"varint,4,opt,name=amountUsers,proto3" json:"amountUsers,omitempty"`     // Amount of users in current competition.
	AddedAt       string `protobuf:"bytes,5,opt,name=addedAt,proto3" json:"addedAt,omitempty"`              // Datetime of added solution.
}

func (x *CompetitionInfoFullOwner) Reset() {
	*x = CompetitionInfoFullOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionInfoFullOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionInfoFullOwner) ProtoMessage() {}

func (x *CompetitionInfoFullOwner) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionInfoFullOwner.ProtoReflect.Descriptor instead.
func (*CompetitionInfoFullOwner) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{16}
}

func (x *CompetitionInfoFullOwner) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

func (x *CompetitionInfoFullOwner) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CompetitionInfoFullOwner) GetDatasetTitle() string {
	if x != nil {
		return x.DatasetTitle
	}
	return ""
}

func (x *CompetitionInfoFullOwner) GetAmountUsers() int64 {
	if x != nil {
		return x.AmountUsers
	}
	return 0
}

func (x *CompetitionInfoFullOwner) GetAddedAt() string {
	if x != nil {
		return x.AddedAt
	}
	return ""
}

type GetNextSolutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID        int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`               // User ID of user.
	CompetitionID int64 `protobuf:"varint,2,opt,name=competitionID,proto3" json:"competitionID,omitempty"` // Competition ID of competition.
	SolutionID    int64 `protobuf:"varint,3,opt,name=solutionID,proto3" json:"solutionID,omitempty"`       // Solution ID of solution.
}

func (x *GetNextSolutionResponse) Reset() {
	*x = GetNextSolutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextSolutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextSolutionResponse) ProtoMessage() {}

func (x *GetNextSolutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextSolutionResponse.ProtoReflect.Descriptor instead.
func (*GetNextSolutionResponse) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{17}
}

func (x *GetNextSolutionResponse) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetNextSolutionResponse) GetCompetitionID() int64 {
	if x != nil {
		return x.CompetitionID
	}
	return 0
}

func (x *GetNextSolutionResponse) GetSolutionID() int64 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

type SaveSolutionResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SolutionID int64   `protobuf:"varint,1,opt,name=solutionID,proto3" json:"solutionID,omitempty"` // Solution ID of solution.
	Score      float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`          // Score of solution.
	RunTime    string  `protobuf:"bytes,3,opt,name=runTime,proto3" json:"runTime,omitempty"`        // Run time of solution.
}

func (x *SaveSolutionResultRequest) Reset() {
	*x = SaveSolutionResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_competition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveSolutionResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveSolutionResultRequest) ProtoMessage() {}

func (x *SaveSolutionResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_competition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveSolutionResultRequest.ProtoReflect.Descriptor instead.
func (*SaveSolutionResultRequest) Descriptor() ([]byte, []int) {
	return file_competition_proto_rawDescGZIP(), []int{18}
}

func (x *SaveSolutionResultRequest) GetSolutionID() int64 {
	if x != nil {
		return x.SolutionID
	}
	return 0
}

func (x *SaveSolutionResultRequest) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SaveSolutionResultRequest) GetRunTime() string {
	if x != nil {
		return x.RunTime
	}
	return ""
}

var File_competition_proto protoreflect.FileDescriptor

var file_competition_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01,
	0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0xb8, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x16,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x61,
	0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x71, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x56, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x91, 0x02, 0x0a,
	0x17, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x3a, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x7f, 0x0a, 0x13,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x55, 0x0a,
	0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xc5, 0x01, 0x0a, 0x19, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x31, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c,
	0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0x77, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x6b, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xc2,
	0x06, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x64, 0x69, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x53, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x76, 0x61, 0x72, 0x6b, 0x69, 0x73, 0x2d, 0x6d, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x3b,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_competition_proto_rawDescOnce sync.Once
	file_competition_proto_rawDescData = file_competition_proto_rawDesc
)

func file_competition_proto_rawDescGZIP() []byte {
	file_competition_proto_rawDescOnce.Do(func() {
		file_competition_proto_rawDescData = protoimpl.X.CompressGZIP(file_competition_proto_rawDescData)
	})
	return file_competition_proto_rawDescData
}

var file_competition_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_competition_proto_goTypes = []interface{}{
	(*CompetitionCreateRequest)(nil),  // 0: competition.CompetitionCreateRequest
	(*CompetitionCreateResponse)(nil), // 1: competition.CompetitionCreateResponse
	(*CompetitionEditRequest)(nil),    // 2: competition.CompetitionEditRequest
	(*CompetitionListRequest)(nil),    // 3: competition.CompetitionListRequest
	(*CompetitionListResponse)(nil),   // 4: competition.CompetitionListResponse
	(*CompetitionInfo)(nil),           // 5: competition.CompetitionInfo
	(*CompetitionInfoRequest)(nil),    // 6: competition.CompetitionInfoRequest
	(*CompetitionInfoResponse)(nil),   // 7: competition.CompetitionInfoResponse
	(*LeaderBoardRequest)(nil),        // 8: competition.LeaderBoardRequest
	(*LeaderBoardResponse)(nil),       // 9: competition.LeaderBoardResponse
	(*LeaderBoard)(nil),               // 10: competition.LeaderBoard
	(*UserActivityTotalRequest)(nil),  // 11: competition.UserActivityTotalRequest
	(*UserActivityTotalResponse)(nil), // 12: competition.UserActivityTotalResponse
	(*UserActivityFullRequest)(nil),   // 13: competition.UserActivityFullRequest
	(*UserActivityFullResponse)(nil),  // 14: competition.UserActivityFullResponse
	(*CompetitionInfoFull)(nil),       // 15: competition.CompetitionInfoFull
	(*CompetitionInfoFullOwner)(nil),  // 16: competition.CompetitionInfoFullOwner
	(*GetNextSolutionResponse)(nil),   // 17: competition.GetNextSolutionResponse
	(*SaveSolutionResultRequest)(nil), // 18: competition.SaveSolutionResultRequest
	(*emptypb.Empty)(nil),             // 19: google.protobuf.Empty
}
var file_competition_proto_depIdxs = []int32{
	5,  // 0: competition.CompetitionListResponse.competitionList:type_name -> competition.CompetitionInfo
	10, // 1: competition.LeaderBoardResponse.leaderBoardList:type_name -> competition.LeaderBoard
	16, // 2: competition.UserActivityFullResponse.owner:type_name -> competition.CompetitionInfoFullOwner
	15, // 3: competition.UserActivityFullResponse.member:type_name -> competition.CompetitionInfoFull
	0,  // 4: competition.Competition.CompetitionCreate:input_type -> competition.CompetitionCreateRequest
	2,  // 5: competition.Competition.CompetitionEdit:input_type -> competition.CompetitionEditRequest
	3,  // 6: competition.Competition.CompetitionList:input_type -> competition.CompetitionListRequest
	6,  // 7: competition.Competition.GetCompetitionInfo:input_type -> competition.CompetitionInfoRequest
	8,  // 8: competition.Competition.LeaderBoard:input_type -> competition.LeaderBoardRequest
	11, // 9: competition.Competition.UserActivityTotal:input_type -> competition.UserActivityTotalRequest
	13, // 10: competition.Competition.UserActivityFull:input_type -> competition.UserActivityFullRequest
	19, // 11: competition.Competition.GetNextSolution:input_type -> google.protobuf.Empty
	18, // 12: competition.Competition.SaveSolutionResult:input_type -> competition.SaveSolutionResultRequest
	1,  // 13: competition.Competition.CompetitionCreate:output_type -> competition.CompetitionCreateResponse
	19, // 14: competition.Competition.CompetitionEdit:output_type -> google.protobuf.Empty
	4,  // 15: competition.Competition.CompetitionList:output_type -> competition.CompetitionListResponse
	7,  // 16: competition.Competition.GetCompetitionInfo:output_type -> competition.CompetitionInfoResponse
	9,  // 17: competition.Competition.LeaderBoard:output_type -> competition.LeaderBoardResponse
	12, // 18: competition.Competition.UserActivityTotal:output_type -> competition.UserActivityTotalResponse
	14, // 19: competition.Competition.UserActivityFull:output_type -> competition.UserActivityFullResponse
	17, // 20: competition.Competition.GetNextSolution:output_type -> competition.GetNextSolutionResponse
	19, // 21: competition.Competition.SaveSolutionResult:output_type -> google.protobuf.Empty
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_competition_proto_init() }
func file_competition_proto_init() {
	if File_competition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_competition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderBoardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderBoardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaderBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActivityTotalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActivityTotalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActivityFullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserActivityFullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionInfoFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionInfoFullOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextSolutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_competition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveSolutionResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_competition_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_competition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_competition_proto_goTypes,
		DependencyIndexes: file_competition_proto_depIdxs,
		MessageInfos:      file_competition_proto_msgTypes,
	}.Build()
	File_competition_proto = out.File
	file_competition_proto_rawDesc = nil
	file_competition_proto_goTypes = nil
	file_competition_proto_depIdxs = nil
}
