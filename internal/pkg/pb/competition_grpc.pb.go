// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: competition.proto

package competition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Competition_CompetitionCreate_FullMethodName  = "/competition.Competition/CompetitionCreate"
	Competition_CompetitionEdit_FullMethodName    = "/competition.Competition/CompetitionEdit"
	Competition_CompetitionList_FullMethodName    = "/competition.Competition/CompetitionList"
	Competition_GetCompetitionInfo_FullMethodName = "/competition.Competition/GetCompetitionInfo"
	Competition_LeaderBoard_FullMethodName        = "/competition.Competition/LeaderBoard"
	Competition_UserActivityTotal_FullMethodName  = "/competition.Competition/UserActivityTotal"
	Competition_UserActivityFull_FullMethodName   = "/competition.Competition/UserActivityFull"
	Competition_GetNextSolution_FullMethodName    = "/competition.Competition/GetNextSolution"
	Competition_SaveSolutionResult_FullMethodName = "/competition.Competition/SaveSolutionResult"
)

// CompetitionClient is the client API for Competition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompetitionClient interface {
	// Create competition and save info.
	CompetitionCreate(ctx context.Context, in *CompetitionCreateRequest, opts ...grpc.CallOption) (*CompetitionCreateResponse, error)
	// Edit competition info.
	CompetitionEdit(ctx context.Context, in *CompetitionEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Response list of available competition.
	CompetitionList(ctx context.Context, in *CompetitionListRequest, opts ...grpc.CallOption) (*CompetitionListResponse, error)
	// Response info about competition.
	GetCompetitionInfo(ctx context.Context, in *CompetitionInfoRequest, opts ...grpc.CallOption) (*CompetitionInfoResponse, error)
	// Response leaderboards.
	LeaderBoard(ctx context.Context, in *LeaderBoardRequest, opts ...grpc.CallOption) (*LeaderBoardResponse, error)
	// Get total info about user's activity
	UserActivityTotal(ctx context.Context, in *UserActivityTotalRequest, opts ...grpc.CallOption) (*UserActivityTotalResponse, error)
	// Get full info about user's activity
	UserActivityFull(ctx context.Context, in *UserActivityFullRequest, opts ...grpc.CallOption) (*UserActivityFullResponse, error)
	GetNextSolution(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNextSolutionResponse, error)
	SaveSolutionResult(ctx context.Context, in *SaveSolutionResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type competitionClient struct {
	cc grpc.ClientConnInterface
}

func NewCompetitionClient(cc grpc.ClientConnInterface) CompetitionClient {
	return &competitionClient{cc}
}

func (c *competitionClient) CompetitionCreate(ctx context.Context, in *CompetitionCreateRequest, opts ...grpc.CallOption) (*CompetitionCreateResponse, error) {
	out := new(CompetitionCreateResponse)
	err := c.cc.Invoke(ctx, Competition_CompetitionCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) CompetitionEdit(ctx context.Context, in *CompetitionEditRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Competition_CompetitionEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) CompetitionList(ctx context.Context, in *CompetitionListRequest, opts ...grpc.CallOption) (*CompetitionListResponse, error) {
	out := new(CompetitionListResponse)
	err := c.cc.Invoke(ctx, Competition_CompetitionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) GetCompetitionInfo(ctx context.Context, in *CompetitionInfoRequest, opts ...grpc.CallOption) (*CompetitionInfoResponse, error) {
	out := new(CompetitionInfoResponse)
	err := c.cc.Invoke(ctx, Competition_GetCompetitionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) LeaderBoard(ctx context.Context, in *LeaderBoardRequest, opts ...grpc.CallOption) (*LeaderBoardResponse, error) {
	out := new(LeaderBoardResponse)
	err := c.cc.Invoke(ctx, Competition_LeaderBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) UserActivityTotal(ctx context.Context, in *UserActivityTotalRequest, opts ...grpc.CallOption) (*UserActivityTotalResponse, error) {
	out := new(UserActivityTotalResponse)
	err := c.cc.Invoke(ctx, Competition_UserActivityTotal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) UserActivityFull(ctx context.Context, in *UserActivityFullRequest, opts ...grpc.CallOption) (*UserActivityFullResponse, error) {
	out := new(UserActivityFullResponse)
	err := c.cc.Invoke(ctx, Competition_UserActivityFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) GetNextSolution(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNextSolutionResponse, error) {
	out := new(GetNextSolutionResponse)
	err := c.cc.Invoke(ctx, Competition_GetNextSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitionClient) SaveSolutionResult(ctx context.Context, in *SaveSolutionResultRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Competition_SaveSolutionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompetitionServer is the server API for Competition service.
// All implementations must embed UnimplementedCompetitionServer
// for forward compatibility
type CompetitionServer interface {
	// Create competition and save info.
	CompetitionCreate(context.Context, *CompetitionCreateRequest) (*CompetitionCreateResponse, error)
	// Edit competition info.
	CompetitionEdit(context.Context, *CompetitionEditRequest) (*emptypb.Empty, error)
	// Response list of available competition.
	CompetitionList(context.Context, *CompetitionListRequest) (*CompetitionListResponse, error)
	// Response info about competition.
	GetCompetitionInfo(context.Context, *CompetitionInfoRequest) (*CompetitionInfoResponse, error)
	// Response leaderboards.
	LeaderBoard(context.Context, *LeaderBoardRequest) (*LeaderBoardResponse, error)
	// Get total info about user's activity
	UserActivityTotal(context.Context, *UserActivityTotalRequest) (*UserActivityTotalResponse, error)
	// Get full info about user's activity
	UserActivityFull(context.Context, *UserActivityFullRequest) (*UserActivityFullResponse, error)
	GetNextSolution(context.Context, *emptypb.Empty) (*GetNextSolutionResponse, error)
	SaveSolutionResult(context.Context, *SaveSolutionResultRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCompetitionServer()
}

// UnimplementedCompetitionServer must be embedded to have forward compatible implementations.
type UnimplementedCompetitionServer struct {
}

func (UnimplementedCompetitionServer) CompetitionCreate(context.Context, *CompetitionCreateRequest) (*CompetitionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompetitionCreate not implemented")
}
func (UnimplementedCompetitionServer) CompetitionEdit(context.Context, *CompetitionEditRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompetitionEdit not implemented")
}
func (UnimplementedCompetitionServer) CompetitionList(context.Context, *CompetitionListRequest) (*CompetitionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompetitionList not implemented")
}
func (UnimplementedCompetitionServer) GetCompetitionInfo(context.Context, *CompetitionInfoRequest) (*CompetitionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompetitionInfo not implemented")
}
func (UnimplementedCompetitionServer) LeaderBoard(context.Context, *LeaderBoardRequest) (*LeaderBoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderBoard not implemented")
}
func (UnimplementedCompetitionServer) UserActivityTotal(context.Context, *UserActivityTotalRequest) (*UserActivityTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivityTotal not implemented")
}
func (UnimplementedCompetitionServer) UserActivityFull(context.Context, *UserActivityFullRequest) (*UserActivityFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivityFull not implemented")
}
func (UnimplementedCompetitionServer) GetNextSolution(context.Context, *emptypb.Empty) (*GetNextSolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextSolution not implemented")
}
func (UnimplementedCompetitionServer) SaveSolutionResult(context.Context, *SaveSolutionResultRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSolutionResult not implemented")
}
func (UnimplementedCompetitionServer) mustEmbedUnimplementedCompetitionServer() {}

// UnsafeCompetitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompetitionServer will
// result in compilation errors.
type UnsafeCompetitionServer interface {
	mustEmbedUnimplementedCompetitionServer()
}

func RegisterCompetitionServer(s grpc.ServiceRegistrar, srv CompetitionServer) {
	s.RegisterService(&Competition_ServiceDesc, srv)
}

func _Competition_CompetitionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).CompetitionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_CompetitionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).CompetitionCreate(ctx, req.(*CompetitionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_CompetitionEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).CompetitionEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_CompetitionEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).CompetitionEdit(ctx, req.(*CompetitionEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_CompetitionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).CompetitionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_CompetitionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).CompetitionList(ctx, req.(*CompetitionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_GetCompetitionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).GetCompetitionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_GetCompetitionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).GetCompetitionInfo(ctx, req.(*CompetitionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_LeaderBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderBoardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).LeaderBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_LeaderBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).LeaderBoard(ctx, req.(*LeaderBoardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_UserActivityTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActivityTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).UserActivityTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_UserActivityTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).UserActivityTotal(ctx, req.(*UserActivityTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_UserActivityFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActivityFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).UserActivityFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_UserActivityFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).UserActivityFull(ctx, req.(*UserActivityFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_GetNextSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).GetNextSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_GetNextSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).GetNextSolution(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Competition_SaveSolutionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSolutionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitionServer).SaveSolutionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Competition_SaveSolutionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitionServer).SaveSolutionResult(ctx, req.(*SaveSolutionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Competition_ServiceDesc is the grpc.ServiceDesc for Competition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Competition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "competition.Competition",
	HandlerType: (*CompetitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompetitionCreate",
			Handler:    _Competition_CompetitionCreate_Handler,
		},
		{
			MethodName: "CompetitionEdit",
			Handler:    _Competition_CompetitionEdit_Handler,
		},
		{
			MethodName: "CompetitionList",
			Handler:    _Competition_CompetitionList_Handler,
		},
		{
			MethodName: "GetCompetitionInfo",
			Handler:    _Competition_GetCompetitionInfo_Handler,
		},
		{
			MethodName: "LeaderBoard",
			Handler:    _Competition_LeaderBoard_Handler,
		},
		{
			MethodName: "UserActivityTotal",
			Handler:    _Competition_UserActivityTotal_Handler,
		},
		{
			MethodName: "UserActivityFull",
			Handler:    _Competition_UserActivityFull_Handler,
		},
		{
			MethodName: "GetNextSolution",
			Handler:    _Competition_GetNextSolution_Handler,
		},
		{
			MethodName: "SaveSolutionResult",
			Handler:    _Competition_SaveSolutionResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "competition.proto",
}
